#title           : Common Methods Lib
#description     : This is intended to be used as an include file in a BASH
#                  Script
#author          : L. E. Drake
#date            : 2015.04.08
#version         : 0.0.0
#usage           : . lib/CommonMethods
#bash_version    : GNU bash, version 4.3.11(1)-release (x86_64-pc-linux-gnu)
#notes           :

MsgColor='\e[1;33m'
CmdColor='\e[1;34m'
ColorOff='\e[0m'

function msg() {
  # Helper function: Output message text in the message color
  echo -e "${MsgColor}$1\e[0m"
}

function do_cmd() {
  # Helper function: Output the command in the command color
  # and execute the command
  echo -e "${CmdColor}$1\e[0m"
  $1
  echo ''
}

function cmd() {
  local m=''
  do_cmd "$1"

  if [ $# -gt 1 ]
  then
    m="$2"
    git add -A;git commit -m"$m";echo ''
  fi
}

function init_project() {
  # Initialize the Rails Project
  local proj_name="$1"
  local rails_version="$3"
  local ruby_version="$2"
  local options="$4"

  # Note: I am using msg and cmd to output info in color.  I am ware that
  # there are other ways to doe this. But for my audience this keeps it
  # simple and straight forward

  if [ -d "$proj_name" ]; then
    msg "Removing folder ${proj_name}"
    cmd "rm -rf ./${proj_name}"
  fi

  msg "Create new Rails App"
  cmd "rails _${rails_version}_ new $proj_name $options"
}

function crete_dot_rvm_file() {
  echo rvm --create use "$GEM_SET_NAME" > .rvmrc
}

function disable_gem() {
  local find_text="$1"
  local fn="./Gemfile"
  local replacement_text="# $1"

  sed -i "s/$find_text/$replacement_text/g" "$fn"
}

function add_to_end_of_group() {
  local beginning_text="$1"
  local ending_text='end'
  local fn="$3"
  local insert_text="$2"

  n=$(sed -n "/$beginning_text/,/end/ { /end/{=;p} }" \
      $fn|head -n 1|awk '{print $1;}')
  sed -i "${n}i \ \ ${insert_text}" "$fn"
}

function add_to_gemfile() {
  local find_text=" gem 'spring'"
  local fn="./Gemfile"
  local gem_str=''
  local group_name=''
  local insert_text=''

  if [ "$1" = "group" ]; then
    group_name="$2"
    gem_str="$3"
    add_to_end_of_group "$group_name" "$gem_str" "$fn"
  elif [ "$1" = "base" ]; then
    gem_str="$2"
  else
    gem_str="$1"
  fi
}

function rm_comments_and_blank_lines_from_gemfile() {
  local find_text=""
  local fn="./Gemfile"
  local m="Remove comments and blank lines from Gemfile"
  local find_text="^group"
  local replacement_text="*group"

  msg "$m"

  # Remove Comments
  find_text="^\s*# "
  sed -i "/$find_text/d" $fn

  # Remove Blank Lines
  find_text="^\s*$"
  sed -i "/$find_text/d" $fn

  find_text="^group"
  replacement_text="\ngroup"
  sed -i "s/$find_text/$replacement_text/g" "$fn"

  # Commit to repository
  git add -A;git commit -m"$m";echo ''
}

function add_ruby_ver_to_gemfile() {
  local find_text="source 'https:\/\/rubygems.org'"
  local fn="./Gemfile"
  local insert_text="ruby '$1'\n"
  local m="Add Ruby version to Gemfile"
  local replacement_text=''

  msg "$m"

  sed -i "/$find_text/a $insert_text" $fn

  replacement_text="${find_text}\n"
  sed -i "s/$find_text/$replacement_text/g" "$fn"

  git add -A;git commit -m"$m";echo ''
}

function add_pry_to_gemfile() {
  local gems=("gem 'pry', '~> 0.10.1'" "gem 'pry-nav', '~> 0.2.4'")
  local m="Add Pry to Gemfile"

  for i in "${gems[@]}"
  do
    add_to_gemfile "group" "group :development, :test" "$i"
  done

  # Commit to repository
  git add -A;git commit -m"$m";echo ''
}

function add_awesome_print_to_gemfile() {
  local gem="gem 'awesome_print', '~> 1.6.1'"
  local m="Add Awesome Print to Gemfile"

  add_to_gemfile "group" "group :development, :test" "$gem"

  # Commit to repository
  git add -A;git commit -m"$m";echo ''
}
